C a6_reorder+rel+Crlx
{ [x] = 0; [y] = 0; [zero] = 0; }

P0 (int* x, int* y) {
  *y = 1;
  atomic_store_explicit(x, 1, memory_order_release);
}

P1 (int* x, int* y, int* zero) {
  atomic_thread_fence(memory_order_acquire);
  int r0 = atomic_load_explicit(x, memory_order_relaxed);
  if (r0) {
    atomic_compare_exchange_strong_explicit(y, zero, 1, memory_order_relaxed, memory_order_relaxed);
  }
}
